<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Secure Invoice Upload</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .container { max-width: 800px; margin: 2rem auto; padding: 0 1rem; }
    .section { background: var(--section-bg); border-radius: 12px; padding: 2rem; margin-bottom: 2rem; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }
    .upload-title { text-align: center; margin-bottom: 1.5rem; color: var(--text-primary); }
    .upload-status { margin-bottom: 1.5rem; text-align: center; font-weight: 500; }
    .upload-success { color: #388e3c; }
    .upload-error { color: #d84315; }
    .drop-area { border: 2px dashed var(--border-color); border-radius: 8px; padding: 2rem; text-align: center; margin-bottom: 1rem; }
    .drop-area.drag-over { border-color: var(--primary); background: var(--hover-bg); }
    .file-label { color: var(--primary); cursor: pointer; }
    .file-label:hover { text-decoration: underline; }
    .upload-btn { background: var(--primary); color: white; border: none; padding: 0.7rem 1.5rem; border-radius: 8px; font-size: 1.1rem; font-weight: 600; cursor: pointer; width: 100%; margin-top: 1rem; }
    .upload-btn:hover { background: var(--primary-dark); }
    .camera-btn { background: var(--secondary); color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; font-size: 1rem; width: 100%; margin-top: 0.5rem; cursor: pointer; }
    .camera-btn:hover { background: var(--secondary-dark); }
    .image-preview { margin-top: 1rem; }
    .image-preview img { max-width: 100%; max-height: 300px; border-radius: 8px; }
    .upload-link-info { text-align: center; margin-bottom: 1rem; color: var(--primary); font-size: 1.1em; padding: 0.5rem; background: var(--info-bg); border-radius: 6px; }
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }
    .form-full { grid-column: 1 / -1; }
    label { display: block; margin-bottom: 0.5rem; color: var(--text-secondary); }
    input, textarea { width: 100%; padding: 0.5rem; border: 1px solid var(--border-color); border-radius: 4px; background: var(--input-bg); color: var(--text-primary); }
    textarea { min-height: 100px; resize: vertical; }
    .review-section { display: none; }
    .review-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem; }
    .review-item { background: var(--card-bg); padding: 1rem; border-radius: 6px; }
    .review-label { font-weight: bold; color: var(--text-secondary); }
    .review-value { margin-top: 0.25rem; }
    .buttons-container { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 1rem; }
    .modal { display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.7); align-items: center; justify-content: center; z-index: 1000; }
    .modal-content { background: white; padding: 1.5rem; border-radius: 10px; max-width: 400px; margin: auto; display: flex; flex-direction: column; align-items: center; }
    .review-input {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      background: var(--input-bg);
      color: var(--text-primary);
      margin-top: 0.5rem;
    }
    .review-input:focus {
      outline: none;
      border-color: var(--primary);
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="linkInfo" class="upload-link-info"></div>
    <div id="statusMsg" class="upload-status"></div>

    <div id="uploadSection" class="section" style="display:none;">
      <h2 class="upload-title">Upload Invoice</h2>
      <form id="uploadForm">
        <div id="dropArea" class="drop-area">
          <p>Drag & Drop or <label for="invoiceImage" class="file-label">Browse</label></p>
          <input type="file" id="invoiceImage" name="invoiceImage" accept="image/*" hidden>
          <div id="imagePreview" class="image-preview"></div>
        </div>
        <button type="button" id="cameraBtn" class="camera-btn">ðŸ“· Use Camera</button>
        <button type="submit" class="upload-btn">Upload & Extract</button>
      </form>
    </div>

    <div id="manualSection" class="section" style="display:none;">
      <h2 class="upload-title">Manual Invoice Entry</h2>
      <form id="manualInvoiceForm">
        <div class="form-grid">
          <label>
            Invoice Number*
            <input type="text" name="invoiceNumber" required>
          </label>
          <label>
            Client Name*
            <input type="text" name="clientName" required>
          </label>
          <label>
            Amount*
            <input type="number" name="amount" required min="0" step="0.01">
          </label>
          <label>
            Date*
            <input type="date" name="date" required>
          </label>
          <label class="form-full">
            Property Address*
            <textarea name="propertyAddress" required></textarea>
          </label>
          <label class="form-full">
            Service Description
            <textarea name="serviceDescription"></textarea>
          </label>
        </div>
        <button type="submit" class="upload-btn">Submit Invoice</button>
      </form>
    </div>

    <div id="reviewSection" class="section review-section">
      <h2 class="upload-title">Review Invoice</h2>
      <div class="review-grid">
        <div class="review-item">
          <div class="review-label">Invoice Number</div>
          <div id="reviewInvoiceNumber" class="review-value"></div>
        </div>
        <div class="review-item">
          <div class="review-label">Client Name</div>
          <div id="reviewClientName" class="review-value"></div>
        </div>
        <div class="review-item">
          <div class="review-label">Amount</div>
          <div id="reviewAmount" class="review-value"></div>
        </div>
        <div class="review-item">
          <div class="review-label">Date</div>
          <div id="reviewDate" class="review-value"></div>
        </div>
        <div class="review-item form-full">
          <div class="review-label">Property Address</div>
          <div id="reviewAddress" class="review-value"></div>
        </div>
        <div class="review-item form-full">
          <div class="review-label">Service Description</div>
          <div id="reviewDescription" class="review-value"></div>
        </div>
      </div>
      <div class="buttons-container">
        <button type="button" id="editButton" class="camera-btn">Edit Information</button>
        <button type="button" id="confirmButton" class="upload-btn">Confirm & Submit</button>
      </div>
    </div>

    <div id="successMsg" class="upload-success" style="display:none;text-align:center;padding:1rem;"></div>
  </div>

  <div id="cameraModal" class="modal">
    <div class="modal-content">
      <video id="cameraVideo" autoplay playsinline style="width:100%;max-width:350px;"></video>
      <button id="capturePhotoBtn" class="camera-btn">Capture Photo</button>
      <button id="closeCameraModal" class="camera-btn" style="background:#f44336;margin-top:0.5rem;">Close</button>
    </div>
  </div>

  <script>
    // Get token from URL and show sections immediately
    const token = window.location.pathname.split('/').pop();
    let linkData = null;
    let extractedData = null;

    // Show the upload sections immediately
    document.getElementById('uploadSection').style.display = 'block';
    document.getElementById('manualSection').style.display = 'block';
    document.getElementById('linkInfo').innerHTML = `<strong>Upload Link</strong>`;

    // Optional validation
    async function validateLink() {
      try {
        const response = await fetch(`/upload-link/${token}`);
        const data = await response.json();
        
        if (response.ok && data.link) {
          linkData = data.link;
          document.getElementById('linkInfo').innerHTML = `
            <strong>${linkData.type === 'permanent' ? 'Permanent' : 'One-Time'} Upload Link</strong><br>
            ${linkData.description ? `<small>${linkData.description}</small>` : ''}
          `;
        }
      } catch (error) {
        console.log('Link validation skipped');
      }
    }

    function showStatus(message, type = 'info') {
      const statusEl = document.getElementById('statusMsg');
      statusEl.textContent = message;
      statusEl.className = `upload-status upload-${type}`;
    }

    // File handling
    const dropArea = document.getElementById('dropArea');
    const fileInput = document.getElementById('invoiceImage');

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
      dropArea.classList.add('drag-over');
    }

    function unhighlight(e) {
      dropArea.classList.remove('drag-over');
    }

    dropArea.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
      handleFiles(files);
    }

    fileInput.addEventListener('change', function(e) {
      handleFiles(this.files);
    });

    function handleFiles(files) {
      if (files.length === 0) return;
      const file = files[0];
      if (!file.type.startsWith('image/')) {
        showStatus('Please select an image file', 'error');
        return;
      }
      showPreview(file);
    }

    function showPreview(file) {
      const imagePreview = document.getElementById('imagePreview');
      imagePreview.innerHTML = '';
      if (!file) return;
      const img = document.createElement('img');
      img.src = URL.createObjectURL(file);
      imagePreview.appendChild(img);
    }

    // Upload handling
    document.getElementById('uploadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData();
      const file = fileInput.files[0];
      if (!file) {
        showStatus('Please select a file', 'error');
        return;
      }
      
      formData.append('file', file);
      formData.append('token', token);
      showStatus('Uploading and processing...', 'info');
      
      try {
        console.log('=== UPLOAD PROCESS START ===');
        console.log('Uploading file:', file.name, 'size:', file.size);
        
        const response = await fetch('https://shardcarecubs.app.n8n.cloud/webhook/2247f975-154a-4633-b84a-4a0c83073c84', {
          method: 'POST',
          body: formData
        });
        
        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));
        
        const responseText = await response.text();
        console.log('\n=== N8N WEBHOOK RESPONSE ===');
        console.log(responseText);
        console.log('\n=== END WEBHOOK RESPONSE ===');
        
        let result;
        try {
          result = JSON.parse(responseText);
          console.log('\n=== PARSED RESPONSE ===');
          console.log(JSON.stringify(result, null, 2));
          
          if (result && result.content) {
            console.log('\n=== CONTENT FROM RESPONSE ===');
            console.log(result.content);
            const extractedData = JSON.parse(result.content);
            console.log('\n=== FINAL PARSED DATA ===');
            console.log(JSON.stringify(extractedData, null, 2));
            showReviewSection(extractedData);
          } else {
            console.error('Response missing content field:', result);
            showStatus('Unexpected response format from server', 'error');
          }
        } catch (parseError) {
          console.error('Error parsing response:', parseError);
          console.error('Raw response was:', responseText);
          showStatus('Invalid response from server', 'error');
          return;
        }
        console.log('=== UPLOAD PROCESS END ===');
      } catch (error) {
        console.error('Upload error:', error);
        showStatus('Upload failed: ' + (error.message || 'Unknown error'), 'error');
      }
    });

    // Manual form handling
    document.getElementById('manualInvoiceForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      extractedData = data;
      showReviewSection(data);
    });

    // Review section handling
    function showReviewSection(data) {
      try {
        // Parse the data if it's a string
        if (typeof data === 'string') {
          data = JSON.parse(data);
        }
        
        const reviewSection = document.getElementById('reviewSection');
        reviewSection.style.display = 'block';
        
        // Update input fields with extracted data
        const fields = {
          'reviewInvoiceNumber': 'invoiceNumber',
          'reviewClientName': 'clientName',
          'reviewAmount': 'amount',
          'reviewDate': 'date',
          'reviewAddress': 'propertyAddress',
          'reviewDescription': 'serviceDescription'
        };
        
        // Create editable fields for each piece of data
        Object.entries(fields).forEach(([elementId, dataKey]) => {
          const container = document.getElementById(elementId);
          container.innerHTML = ''; // Clear existing content
          
          // Create appropriate input type based on the field
          let input;
          if (dataKey === 'date') {
            input = document.createElement('input');
            input.type = 'date';
            input.value = data[dataKey] || '';
          } else if (dataKey === 'amount') {
            input = document.createElement('input');
            input.type = 'number';
            input.step = '0.01';
            input.min = '0';
            input.value = data[dataKey] || '';
          } else if (dataKey === 'propertyAddress' || dataKey === 'serviceDescription') {
            input = document.createElement('textarea');
            input.value = data[dataKey] || '';
            input.rows = 3;
          } else {
            input = document.createElement('input');
            input.type = 'text';
            input.value = data[dataKey] || '';
          }
          
          // Add common properties
          input.className = 'review-input';
          input.name = dataKey;
          input.addEventListener('change', function() {
            // Update extractedData when input changes
            if (this.type === 'number') {
              extractedData[dataKey] = parseFloat(this.value) || 0;
            } else {
              extractedData[dataKey] = this.value;
            }
          });
          
          container.appendChild(input);
        });
        
        // Update extractedData with the current values
        extractedData = {...data};
        
        // Scroll to review section
        reviewSection.scrollIntoView({ behavior: 'smooth' });
      } catch (error) {
        console.error('Error showing review:', error);
        showStatus('Error displaying review data', 'error');
      }
    }

    // Add CSS for editable review fields
    const style = document.createElement('style');
    style.textContent = `
      .review-input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background: var(--input-bg);
        color: var(--text-primary);
        margin-top: 0.5rem;
      }
      .review-input:focus {
        outline: none;
        border-color: var(--primary);
      }
    `;
    document.head.appendChild(style);

    // Edit button handling
    document.getElementById('editButton').addEventListener('click', () => {
      const reviewSection = document.getElementById('reviewSection');
      reviewSection.style.display = 'none';
      document.querySelector('#manualSection').scrollIntoView({ behavior: 'smooth' });
    });

    // Confirm button handling
    document.getElementById('confirmButton').addEventListener('click', async () => {
      try {
        // Use the provided n8n webhook URL for form submission
        const response = await fetch('https://shardcarecubs.app.n8n.cloud/webhook/5b91870b-e072-4562-9737-6277f4ca670b', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ...extractedData,
            token: token,
            linkType: linkData?.type || 'temporary'
          })
        });
        
        const result = await response.json();
        if (result.success) {
          // Hide all sections
          document.getElementById('uploadSection').style.display = 'none';
          document.getElementById('manualSection').style.display = 'none';
          document.getElementById('reviewSection').style.display = 'none';
          
          // Show success message
          const successMsg = document.getElementById('successMsg');
          successMsg.textContent = 'Invoice submitted successfully! Thank you.';
          successMsg.style.display = 'block';
        } else {
          showStatus('Failed to submit invoice', 'error');
        }
      } catch (error) {
        console.error('Submit error:', error);
        showStatus('Failed to submit invoice', 'error');
      }
    });

    // Camera handling
    const cameraBtn = document.getElementById('cameraBtn');
    const cameraModal = document.getElementById('cameraModal');
    const cameraVideo = document.getElementById('cameraVideo');
    const capturePhotoBtn = document.getElementById('capturePhotoBtn');
    const closeCameraModal = document.getElementById('closeCameraModal');

    cameraBtn.addEventListener('click', async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        cameraVideo.srcObject = stream;
        cameraModal.style.display = 'flex';
      } catch (err) {
        showStatus('Camera access denied or not available', 'error');
      }
    });

    capturePhotoBtn.addEventListener('click', () => {
      const canvas = document.createElement('canvas');
      canvas.width = cameraVideo.videoWidth;
      canvas.height = cameraVideo.videoHeight;
      canvas.getContext('2d').drawImage(cameraVideo, 0, 0);
      
      canvas.toBlob(blob => {
        if (blob) {
          const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          fileInput.files = dataTransfer.files;
          showPreview(file);
        }
        closeCameraModal.click();
      }, 'image/jpeg');
    });

    closeCameraModal.addEventListener('click', () => {
      cameraModal.style.display = 'none';
      const stream = cameraVideo.srcObject;
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    });

    // Initialize
    validateLink();
  </script>
</body>
</html>